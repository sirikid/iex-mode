#+title: iex-mode
#+options: toc:nil
#+properties: header-args:emacs-lisp :eval no
#+begin_export markdown
[![builds.sr.ht status](https://builds.sr.ht/~sokolov/iex-mode.svg)](https://builds.sr.ht/~sokolov/iex-mode?)

> This file is automatically generated from `README.org`. Do not edit
> manually.
#+end_export
* iex-mode
  This is a simple comint wrapper around [[https://hexdocs.pm/iex/IEx.html][IEx]].
* Installation
  Just drop the file to the ~load-path~ or use one of the methods below.
** quelpa
   #+begin_src emacs-lisp
   (quelpa
    '(iex-mode
      :fetcher git
      :url "https://git.sr.ht/~sokolov/iex-mode"))
   #+end_src
* Setup
** use-package+quelpa-use-package
   Setup and installation together.
   #+begin_src emacs-lisp
   (use-package iex-mode
     :quelpa (iex-mode :fetcher git :url "https://git.sr.ht/~sokolov/iex-mode")
     :bind
     (:map elixir-mode-map
       ("C-c x i" . iex-run)
       ("C-c x p" . iex-run-script)))
   #+end_src
** use-package
   #+begin_src emacs-lisp
   (use-package iex-mode
     :after elixir-mode
     :bind
     (:map elixir-mode-map
       ("C-c C-z" . iex-run)))

   (use-package iex-mode
     :after projectile
     :config
     (defadvice projectile-run-project
         (around projectile-run-iex (fn arg))
       (if (eq 'elixir (projectile-project-type))
           (iex-run-script
            (projectile-project-root)
            (read-shell-command "iex> " "iex -S mix"))
         (funcall fn arg))))
   #+end_src
* Usage
  You can run ~iex~ in the directory of current buffer with =M-x
  iex-run=.

  You can also run =iex -S mix= in the project root with =M-x
  iex-run-script=.

  In both cases you can edit the exact command to run.
* COMMENT Local variables
# Local Variables:
# eval: (add-hook (quote after-save-hook) (function org-md-export-to-markdown) nil t)
# End:
